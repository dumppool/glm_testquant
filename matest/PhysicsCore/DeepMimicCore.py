# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DeepMimicCore', [dirname(__file__)])
        except ImportError:
            import _DeepMimicCore
            return _DeepMimicCore
        if fp is not None:
            try:
                _mod = imp.load_module('_DeepMimicCore', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _DeepMimicCore = swig_import_helper()
    del swig_import_helper
else:
    import _DeepMimicCore
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DeepMimicCore.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _DeepMimicCore.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DeepMimicCore.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DeepMimicCore.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DeepMimicCore.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DeepMimicCore.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DeepMimicCore.SwigPyIterator_copy(self)

    def next(self):
        return _DeepMimicCore.SwigPyIterator_next(self)

    def __next__(self):
        return _DeepMimicCore.SwigPyIterator___next__(self)

    def previous(self):
        return _DeepMimicCore.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DeepMimicCore.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DeepMimicCore.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DeepMimicCore.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DeepMimicCore.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DeepMimicCore.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DeepMimicCore.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DeepMimicCore.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DeepMimicCore.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DeepMimicCore.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeepMimicCore.IntVector___nonzero__(self)

    def __bool__(self):
        return _DeepMimicCore.IntVector___bool__(self)

    def __len__(self):
        return _DeepMimicCore.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _DeepMimicCore.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeepMimicCore.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeepMimicCore.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeepMimicCore.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeepMimicCore.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeepMimicCore.IntVector___setitem__(self, *args)

    def pop(self):
        return _DeepMimicCore.IntVector_pop(self)

    def append(self, x):
        return _DeepMimicCore.IntVector_append(self, x)

    def empty(self):
        return _DeepMimicCore.IntVector_empty(self)

    def size(self):
        return _DeepMimicCore.IntVector_size(self)

    def swap(self, v):
        return _DeepMimicCore.IntVector_swap(self, v)

    def begin(self):
        return _DeepMimicCore.IntVector_begin(self)

    def end(self):
        return _DeepMimicCore.IntVector_end(self)

    def rbegin(self):
        return _DeepMimicCore.IntVector_rbegin(self)

    def rend(self):
        return _DeepMimicCore.IntVector_rend(self)

    def clear(self):
        return _DeepMimicCore.IntVector_clear(self)

    def get_allocator(self):
        return _DeepMimicCore.IntVector_get_allocator(self)

    def pop_back(self):
        return _DeepMimicCore.IntVector_pop_back(self)

    def erase(self, *args):
        return _DeepMimicCore.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _DeepMimicCore.new_IntVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _DeepMimicCore.IntVector_push_back(self, x)

    def front(self):
        return _DeepMimicCore.IntVector_front(self)

    def back(self):
        return _DeepMimicCore.IntVector_back(self)

    def assign(self, n, x):
        return _DeepMimicCore.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _DeepMimicCore.IntVector_resize(self, *args)

    def insert(self, *args):
        return _DeepMimicCore.IntVector_insert(self, *args)

    def reserve(self, n):
        return _DeepMimicCore.IntVector_reserve(self, n)

    def capacity(self):
        return _DeepMimicCore.IntVector_capacity(self)
    __swig_destroy__ = _DeepMimicCore.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _DeepMimicCore.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DeepMimicCore.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeepMimicCore.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _DeepMimicCore.DoubleVector___bool__(self)

    def __len__(self):
        return _DeepMimicCore.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _DeepMimicCore.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeepMimicCore.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeepMimicCore.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeepMimicCore.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeepMimicCore.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeepMimicCore.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _DeepMimicCore.DoubleVector_pop(self)

    def append(self, x):
        return _DeepMimicCore.DoubleVector_append(self, x)

    def empty(self):
        return _DeepMimicCore.DoubleVector_empty(self)

    def size(self):
        return _DeepMimicCore.DoubleVector_size(self)

    def swap(self, v):
        return _DeepMimicCore.DoubleVector_swap(self, v)

    def begin(self):
        return _DeepMimicCore.DoubleVector_begin(self)

    def end(self):
        return _DeepMimicCore.DoubleVector_end(self)

    def rbegin(self):
        return _DeepMimicCore.DoubleVector_rbegin(self)

    def rend(self):
        return _DeepMimicCore.DoubleVector_rend(self)

    def clear(self):
        return _DeepMimicCore.DoubleVector_clear(self)

    def get_allocator(self):
        return _DeepMimicCore.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _DeepMimicCore.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _DeepMimicCore.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _DeepMimicCore.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _DeepMimicCore.DoubleVector_push_back(self, x)

    def front(self):
        return _DeepMimicCore.DoubleVector_front(self)

    def back(self):
        return _DeepMimicCore.DoubleVector_back(self)

    def assign(self, n, x):
        return _DeepMimicCore.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _DeepMimicCore.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _DeepMimicCore.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _DeepMimicCore.DoubleVector_reserve(self, n)

    def capacity(self):
        return _DeepMimicCore.DoubleVector_capacity(self)
    __swig_destroy__ = _DeepMimicCore.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _DeepMimicCore.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DeepMimicCore.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeepMimicCore.StringVector___nonzero__(self)

    def __bool__(self):
        return _DeepMimicCore.StringVector___bool__(self)

    def __len__(self):
        return _DeepMimicCore.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _DeepMimicCore.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeepMimicCore.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeepMimicCore.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeepMimicCore.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeepMimicCore.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeepMimicCore.StringVector___setitem__(self, *args)

    def pop(self):
        return _DeepMimicCore.StringVector_pop(self)

    def append(self, x):
        return _DeepMimicCore.StringVector_append(self, x)

    def empty(self):
        return _DeepMimicCore.StringVector_empty(self)

    def size(self):
        return _DeepMimicCore.StringVector_size(self)

    def swap(self, v):
        return _DeepMimicCore.StringVector_swap(self, v)

    def begin(self):
        return _DeepMimicCore.StringVector_begin(self)

    def end(self):
        return _DeepMimicCore.StringVector_end(self)

    def rbegin(self):
        return _DeepMimicCore.StringVector_rbegin(self)

    def rend(self):
        return _DeepMimicCore.StringVector_rend(self)

    def clear(self):
        return _DeepMimicCore.StringVector_clear(self)

    def get_allocator(self):
        return _DeepMimicCore.StringVector_get_allocator(self)

    def pop_back(self):
        return _DeepMimicCore.StringVector_pop_back(self)

    def erase(self, *args):
        return _DeepMimicCore.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _DeepMimicCore.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _DeepMimicCore.StringVector_push_back(self, x)

    def front(self):
        return _DeepMimicCore.StringVector_front(self)

    def back(self):
        return _DeepMimicCore.StringVector_back(self)

    def assign(self, n, x):
        return _DeepMimicCore.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _DeepMimicCore.StringVector_resize(self, *args)

    def insert(self, *args):
        return _DeepMimicCore.StringVector_insert(self, *args)

    def reserve(self, n):
        return _DeepMimicCore.StringVector_reserve(self, n)

    def capacity(self):
        return _DeepMimicCore.StringVector_capacity(self)
    __swig_destroy__ = _DeepMimicCore.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _DeepMimicCore.StringVector_swigregister
StringVector_swigregister(StringVector)

class MapStringVectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringVectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringVectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DeepMimicCore.MapStringVectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeepMimicCore.MapStringVectorString___nonzero__(self)

    def __bool__(self):
        return _DeepMimicCore.MapStringVectorString___bool__(self)

    def __len__(self):
        return _DeepMimicCore.MapStringVectorString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _DeepMimicCore.MapStringVectorString___getitem__(self, key)

    def __delitem__(self, key):
        return _DeepMimicCore.MapStringVectorString___delitem__(self, key)

    def has_key(self, key):
        return _DeepMimicCore.MapStringVectorString_has_key(self, key)

    def keys(self):
        return _DeepMimicCore.MapStringVectorString_keys(self)

    def values(self):
        return _DeepMimicCore.MapStringVectorString_values(self)

    def items(self):
        return _DeepMimicCore.MapStringVectorString_items(self)

    def __contains__(self, key):
        return _DeepMimicCore.MapStringVectorString___contains__(self, key)

    def key_iterator(self):
        return _DeepMimicCore.MapStringVectorString_key_iterator(self)

    def value_iterator(self):
        return _DeepMimicCore.MapStringVectorString_value_iterator(self)

    def __setitem__(self, *args):
        return _DeepMimicCore.MapStringVectorString___setitem__(self, *args)

    def asdict(self):
        return _DeepMimicCore.MapStringVectorString_asdict(self)

    def __init__(self, *args):
        this = _DeepMimicCore.new_MapStringVectorString(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _DeepMimicCore.MapStringVectorString_empty(self)

    def size(self):
        return _DeepMimicCore.MapStringVectorString_size(self)

    def swap(self, v):
        return _DeepMimicCore.MapStringVectorString_swap(self, v)

    def begin(self):
        return _DeepMimicCore.MapStringVectorString_begin(self)

    def end(self):
        return _DeepMimicCore.MapStringVectorString_end(self)

    def rbegin(self):
        return _DeepMimicCore.MapStringVectorString_rbegin(self)

    def rend(self):
        return _DeepMimicCore.MapStringVectorString_rend(self)

    def clear(self):
        return _DeepMimicCore.MapStringVectorString_clear(self)

    def get_allocator(self):
        return _DeepMimicCore.MapStringVectorString_get_allocator(self)

    def count(self, x):
        return _DeepMimicCore.MapStringVectorString_count(self, x)

    def erase(self, *args):
        return _DeepMimicCore.MapStringVectorString_erase(self, *args)

    def find(self, x):
        return _DeepMimicCore.MapStringVectorString_find(self, x)

    def lower_bound(self, x):
        return _DeepMimicCore.MapStringVectorString_lower_bound(self, x)

    def upper_bound(self, x):
        return _DeepMimicCore.MapStringVectorString_upper_bound(self, x)
    __swig_destroy__ = _DeepMimicCore.delete_MapStringVectorString
    __del__ = lambda self: None
MapStringVectorString_swigregister = _DeepMimicCore.MapStringVectorString_swigregister
MapStringVectorString_swigregister(MapStringVectorString)

class ConstCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DeepMimicCore.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DeepMimicCore.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _DeepMimicCore.ConstCharVector___bool__(self)

    def __len__(self):
        return _DeepMimicCore.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _DeepMimicCore.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _DeepMimicCore.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _DeepMimicCore.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _DeepMimicCore.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DeepMimicCore.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DeepMimicCore.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _DeepMimicCore.ConstCharVector_pop(self)

    def append(self, x):
        return _DeepMimicCore.ConstCharVector_append(self, x)

    def empty(self):
        return _DeepMimicCore.ConstCharVector_empty(self)

    def size(self):
        return _DeepMimicCore.ConstCharVector_size(self)

    def swap(self, v):
        return _DeepMimicCore.ConstCharVector_swap(self, v)

    def begin(self):
        return _DeepMimicCore.ConstCharVector_begin(self)

    def end(self):
        return _DeepMimicCore.ConstCharVector_end(self)

    def rbegin(self):
        return _DeepMimicCore.ConstCharVector_rbegin(self)

    def rend(self):
        return _DeepMimicCore.ConstCharVector_rend(self)

    def clear(self):
        return _DeepMimicCore.ConstCharVector_clear(self)

    def get_allocator(self):
        return _DeepMimicCore.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _DeepMimicCore.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _DeepMimicCore.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _DeepMimicCore.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _DeepMimicCore.ConstCharVector_push_back(self, x)

    def front(self):
        return _DeepMimicCore.ConstCharVector_front(self)

    def back(self):
        return _DeepMimicCore.ConstCharVector_back(self)

    def assign(self, n, x):
        return _DeepMimicCore.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _DeepMimicCore.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _DeepMimicCore.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _DeepMimicCore.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _DeepMimicCore.ConstCharVector_capacity(self)
    __swig_destroy__ = _DeepMimicCore.delete_ConstCharVector
    __del__ = lambda self: None
ConstCharVector_swigregister = _DeepMimicCore.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)

class cTextureDesc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cTextureDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cTextureDesc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["testAA"] = _DeepMimicCore.cTextureDesc_testAA_set
    __swig_getmethods__["testAA"] = _DeepMimicCore.cTextureDesc_testAA_get
    if _newclass:
        testAA = _swig_property(_DeepMimicCore.cTextureDesc_testAA_get, _DeepMimicCore.cTextureDesc_testAA_set)

    def __init__(self):
        this = _DeepMimicCore.new_cTextureDesc()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _DeepMimicCore.delete_cTextureDesc
    __del__ = lambda self: None
cTextureDesc_swigregister = _DeepMimicCore.cTextureDesc_swigregister
cTextureDesc_swigregister(cTextureDesc)

class cDeepMimicCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cDeepMimicCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cDeepMimicCore, name)
    __repr__ = _swig_repr

    def __init__(self, enable_draw):
        this = _DeepMimicCore.new_cDeepMimicCore(enable_draw)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _DeepMimicCore.delete_cDeepMimicCore
    __del__ = lambda self: None

    def SeedRand(self, seed):
        return _DeepMimicCore.cDeepMimicCore_SeedRand(self, seed)

    def ParseArgs(self, args):
        return _DeepMimicCore.cDeepMimicCore_ParseArgs(self, args)

    def SetArgs(self, args):
        return _DeepMimicCore.cDeepMimicCore_SetArgs(self, args)

    def Init(self):
        return _DeepMimicCore.cDeepMimicCore_Init(self)

    def Update(self, timestep):
        return _DeepMimicCore.cDeepMimicCore_Update(self, timestep)

    def Reset(self):
        return _DeepMimicCore.cDeepMimicCore_Reset(self)

    def GetTime(self):
        return _DeepMimicCore.cDeepMimicCore_GetTime(self)

    def GetKinTime(self):
        return _DeepMimicCore.cDeepMimicCore_GetKinTime(self)

    def GetName(self):
        return _DeepMimicCore.cDeepMimicCore_GetName(self)

    def EnableDraw(self):
        return _DeepMimicCore.cDeepMimicCore_EnableDraw(self)

    def Draw(self):
        return _DeepMimicCore.cDeepMimicCore_Draw(self)

    def Keyboard(self, key, x, y):
        return _DeepMimicCore.cDeepMimicCore_Keyboard(self, key, x, y)

    def MouseClick(self, button, state, x, y):
        return _DeepMimicCore.cDeepMimicCore_MouseClick(self, button, state, x, y)

    def MouseMove(self, x, y):
        return _DeepMimicCore.cDeepMimicCore_MouseMove(self, x, y)

    def Reshape(self, w, h):
        return _DeepMimicCore.cDeepMimicCore_Reshape(self, w, h)

    def Shutdown(self):
        return _DeepMimicCore.cDeepMimicCore_Shutdown(self)

    def IsDone(self):
        return _DeepMimicCore.cDeepMimicCore_IsDone(self)

    def GetDrawScene(self):
        return _DeepMimicCore.cDeepMimicCore_GetDrawScene(self)

    def SetPlaybackSpeed(self, speed):
        return _DeepMimicCore.cDeepMimicCore_SetPlaybackSpeed(self, speed)

    def SetUpdatesPerSec(self, updates_per_sec):
        return _DeepMimicCore.cDeepMimicCore_SetUpdatesPerSec(self, updates_per_sec)

    def GetWinWidth(self):
        return _DeepMimicCore.cDeepMimicCore_GetWinWidth(self)

    def GetWinHeight(self):
        return _DeepMimicCore.cDeepMimicCore_GetWinHeight(self)

    def GetNumUpdateSubsteps(self):
        return _DeepMimicCore.cDeepMimicCore_GetNumUpdateSubsteps(self)

    def IsRLScene(self):
        return _DeepMimicCore.cDeepMimicCore_IsRLScene(self)

    def GetNumAgents(self):
        return _DeepMimicCore.cDeepMimicCore_GetNumAgents(self)

    def NeedNewAction(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_NeedNewAction(self, agent_id)

    def RecordState(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_RecordState(self, agent_id)

    def RecordGoal(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_RecordGoal(self, agent_id)

    def SetAction(self, agent_id, action):
        return _DeepMimicCore.cDeepMimicCore_SetAction(self, agent_id, action)

    def LogVal(self, agent_id, val):
        return _DeepMimicCore.cDeepMimicCore_LogVal(self, agent_id, val)

    def GetActionSpace(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetActionSpace(self, agent_id)

    def GetStateSize(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetStateSize(self, agent_id)

    def GetGoalSize(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetGoalSize(self, agent_id)

    def GetActionSize(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetActionSize(self, agent_id)

    def GetNumActions(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetNumActions(self, agent_id)

    def BuildStateOffset(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildStateOffset(self, agent_id)

    def BuildStateScale(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildStateScale(self, agent_id)

    def BuildGoalOffset(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildGoalOffset(self, agent_id)

    def BuildGoalScale(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildGoalScale(self, agent_id)

    def BuildActionOffset(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildActionOffset(self, agent_id)

    def BuildActionScale(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildActionScale(self, agent_id)

    def BuildActionBoundMin(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildActionBoundMin(self, agent_id)

    def BuildActionBoundMax(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildActionBoundMax(self, agent_id)

    def BuildStateNormGroups(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildStateNormGroups(self, agent_id)

    def BuildGoalNormGroups(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_BuildGoalNormGroups(self, agent_id)

    def CalcReward(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_CalcReward(self, agent_id)

    def GetRewardMin(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetRewardMin(self, agent_id)

    def GetRewardMax(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetRewardMax(self, agent_id)

    def GetRewardFail(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetRewardFail(self, agent_id)

    def GetRewardSucc(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_GetRewardSucc(self, agent_id)

    def IsEpisodeEnd(self):
        return _DeepMimicCore.cDeepMimicCore_IsEpisodeEnd(self)

    def CheckValidEpisode(self):
        return _DeepMimicCore.cDeepMimicCore_CheckValidEpisode(self)

    def CheckTerminate(self, agent_id):
        return _DeepMimicCore.cDeepMimicCore_CheckTerminate(self, agent_id)

    def SetMode(self, mode):
        return _DeepMimicCore.cDeepMimicCore_SetMode(self, mode)

    def SetSampleCount(self, count):
        return _DeepMimicCore.cDeepMimicCore_SetSampleCount(self, count)

    def PrintArgs(self):
        return _DeepMimicCore.cDeepMimicCore_PrintArgs(self)
cDeepMimicCore_swigregister = _DeepMimicCore.cDeepMimicCore_swigregister
cDeepMimicCore_swigregister(cDeepMimicCore)

# This file is compatible with both classic and new-style classes.


